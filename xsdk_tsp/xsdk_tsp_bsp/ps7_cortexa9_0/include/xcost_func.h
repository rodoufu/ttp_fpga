// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XCOST_FUNC_H
#define XCOST_FUNC_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xcost_func_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Lite1_BaseAddress;
} XCost_func_Config;
#endif

typedef struct {
    u32 Lite1_BaseAddress;
    u32 IsReady;
} XCost_func;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XCost_func_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XCost_func_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XCost_func_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XCost_func_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XCost_func_Initialize(XCost_func *InstancePtr, u16 DeviceId);
XCost_func_Config* XCost_func_LookupConfig(u16 DeviceId);
int XCost_func_CfgInitialize(XCost_func *InstancePtr, XCost_func_Config *ConfigPtr);
#else
int XCost_func_Initialize(XCost_func *InstancePtr, const char* InstanceName);
int XCost_func_Release(XCost_func *InstancePtr);
#endif

void XCost_func_Start(XCost_func *InstancePtr);
u32 XCost_func_IsDone(XCost_func *InstancePtr);
u32 XCost_func_IsIdle(XCost_func *InstancePtr);
u32 XCost_func_IsReady(XCost_func *InstancePtr);
void XCost_func_EnableAutoRestart(XCost_func *InstancePtr);
void XCost_func_DisableAutoRestart(XCost_func *InstancePtr);

void XCost_func_Set_quantidadeCidades(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_quantidadeCidades(XCost_func *InstancePtr);
void XCost_func_Set_quantidadeItens(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_quantidadeItens(XCost_func *InstancePtr);
void XCost_func_Set_capacidadeMochila(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_capacidadeMochila(XCost_func *InstancePtr);
void XCost_func_Set_velocidadeMaxima(XCost_func *InstancePtr, u64 Data);
u64 XCost_func_Get_velocidadeMaxima(XCost_func *InstancePtr);
void XCost_func_Set_velocidadeMinima(XCost_func *InstancePtr, u64 Data);
u64 XCost_func_Get_velocidadeMinima(XCost_func *InstancePtr);
void XCost_func_Set_aluguel(XCost_func *InstancePtr, u64 Data);
u64 XCost_func_Get_aluguel(XCost_func *InstancePtr);
void XCost_func_Set_itemValor(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_itemValor(XCost_func *InstancePtr);
void XCost_func_Set_itemPeso(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_itemPeso(XCost_func *InstancePtr);
void XCost_func_Set_inicioItensCidade(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_inicioItensCidade(XCost_func *InstancePtr);
void XCost_func_Set_indiceItemCidade(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_indiceItemCidade(XCost_func *InstancePtr);
void XCost_func_Set_pontoX(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_pontoX(XCost_func *InstancePtr);
void XCost_func_Set_pontoY(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_pontoY(XCost_func *InstancePtr);
void XCost_func_Set_percurso(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_percurso(XCost_func *InstancePtr);
void XCost_func_Set_mochila(XCost_func *InstancePtr, u32 Data);
u32 XCost_func_Get_mochila(XCost_func *InstancePtr);
u64 XCost_func_Get_resposta(XCost_func *InstancePtr);
u32 XCost_func_Get_resposta_vld(XCost_func *InstancePtr);

void XCost_func_InterruptGlobalEnable(XCost_func *InstancePtr);
void XCost_func_InterruptGlobalDisable(XCost_func *InstancePtr);
void XCost_func_InterruptEnable(XCost_func *InstancePtr, u32 Mask);
void XCost_func_InterruptDisable(XCost_func *InstancePtr, u32 Mask);
void XCost_func_InterruptClear(XCost_func *InstancePtr, u32 Mask);
u32 XCost_func_InterruptGetEnabled(XCost_func *InstancePtr);
u32 XCost_func_InterruptGetStatus(XCost_func *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
